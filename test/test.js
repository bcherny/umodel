// Generated by CoffeeScript 1.6.3
var Model;

Model = require('../umodel');

exports.umodel = {
  initialize: function(test) {
    var actual, expected, model;
    model = new Model({
      foo: 'bar'
    });
    actual = model._data.foo;
    expected = 'bar';
    test.equal(actual, expected, 'initializes with data');
    model = new Model({}, {
      separator: '.'
    });
    actual = model.options.separator;
    expected = '.';
    test.equal(actual, expected, 'initializes with options');
    return test.done();
  },
  get: function(test) {
    var actual, expected, model;
    model = new Model;
    model._data = {
      foo: 'bar',
      bar: null,
      baz: {
        moo: 'boo'
      }
    };
    actual = model.get('foo');
    expected = 'bar';
    test.equal(actual, expected, 'shallow get');
    actual = model.get('baz/moo');
    expected = 'boo';
    test.equal(actual, expected, 'deep get');
    actual = model.get('woo');
    expected = void 0;
    test.equal(actual, expected, 'getting an undefined key returns undefined');
    actual = model.get('bar');
    expected = null;
    test.equal(actual, expected, 'get falsey');
    return test.done();
  },
  set: function(test) {
    var actual, expected, model;
    model = new Model;
    model.set('foo', 'bar');
    actual = model._data.foo;
    expected = 'bar';
    test.equal(actual, expected, 'shallow set');
    model.set('baz/moo', 'boo');
    actual = model._data.baz.moo;
    expected = 'boo';
    test.equal(actual, expected, 'deep set');
    return test.done();
  },
  setnx: function(test) {
    var actual, expected, model;
    model = new Model;
    model.setnx('foo', 'bar');
    actual = model._data.foo;
    expected = 'bar';
    test.equal(actual, expected, 'shallow setnx sets');
    model.setnx('foo', 'baz');
    actual = model._data.foo;
    expected = 'bar';
    test.equal(actual, expected, 'shallow setnx does not override once set');
    model.setnx('baz/moo', 'boo');
    actual = model._data.baz.moo;
    expected = 'boo';
    test.equal(actual, expected, 'deep setnx sets');
    model.setnx('baz/moo', 'woo');
    actual = model._data.baz.moo;
    expected = 'boo';
    test.equal(actual, expected, 'deep setnx sets does not override once set');
    return test.done();
  },
  'on (unspecified property)': function(test) {
    var calledGet, calledSet, calledSetnx, model;
    model = new Model({
      foo: {
        bar: 'baz'
      }
    });
    calledGet = false;
    model.on('get', function() {
      return calledGet = true;
    });
    model.get('foo');
    test.equal(calledGet, true, 'on get all');
    calledSet = false;
    model.on('set', function() {
      return calledSet = true;
    });
    model.set('foo/bar', 'moo');
    test.equal(calledSet, true, 'on set all');
    calledSetnx = false;
    model.on('setnx', function() {
      return calledSetnx = true;
    });
    model.setnx('foo/bar', 'moo');
    test.equal(calledSetnx, true, 'on setnx all');
    return test.done();
  },
  'on (one event)': function(test) {
    var calledGet, calledSet, calledSetnx, model;
    model = new Model({
      foo: {
        bar: 'baz'
      }
    });
    calledGet = false;
    model.on('get: foo', function() {
      return calledGet = true;
    });
    model.get('foo/bar');
    test.equal(calledGet, true, 'on get prop');
    calledSet = false;
    model.on('set: foo', function() {
      return calledSet = true;
    });
    model.set('foo/bar', 'moo');
    test.equal(calledSet, true, 'on set prop');
    calledSetnx = false;
    model.on('setnx: foo', function() {
      return calledSetnx = true;
    });
    model.setnx('foo/bar', 'moo');
    test.equal(calledSetnx, true, 'on setnx prop');
    return test.done();
  },
  'on (multiple events)': function(test) {
    var calledAll, calledProp, model;
    model = new Model({
      foo: {
        bar: 'baz'
      }
    });
    calledAll = 0;
    model.on('get set setnx', function() {
      return calledAll++;
    });
    model.get('foo/bar');
    model.set('foo/bar', 'moo');
    model.setnx('foo/bar', 'moo');
    test.equal(calledAll, 3, 'on get set setnx all');
    calledProp = 0;
    model.on('get set setnx: foo', function() {
      return calledProp++;
    });
    model.get('foo/bar');
    model.set('foo/bar', 'moo');
    model.setnx('foo/bar', 'moo');
    test.equal(calledProp, 3, 'on get set setnx prop');
    return test.done();
  },
  'on (called with object)': function(test) {
    var call, called, model;
    model = new Model({
      foo: 'bar',
      bar: 'baz'
    });
    called = 0;
    call = function() {
      return called++;
    };
    model.on({
      'get: foo': call,
      'get: bar': call
    });
    model.get('foo');
    model.get('bar');
    test.equal(called, 2, 'on accepts objects');
    return test.done();
  },
  'on (set gives old value)': function(test) {
    var curr, model, prev;
    prev = 'bar';
    curr = 'baz';
    model = new Model({
      foo: prev
    });
    model.on('set', function(key, value, previous) {
      curr = value;
      return prev = previous;
    });
    model.set('foo', 'baz');
    test.equal(prev, 'bar', 'previous value');
    test.equal(curr, 'baz', 'current value');
    return test.done();
  },
  'trigger': function(test) {
    var call, called, model;
    model = new Model({
      foo: {
        bar: 'baz'
      }
    });
    called = false;
    call = function() {
      return called = true;
    };
    model.on('get foo/bar', call);
    model.trigger('get', 'foo/bar');
    test.equal(called, true, 'trigger triggers events');
    return test.done();
  }
};
